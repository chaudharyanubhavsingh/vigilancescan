package net.javaguids.vigilance;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class VulnerabilityScanner {

    private static final HttpClient client = HttpClient.newHttpClient();

    // General method to perform attack attempts
    private static int performAttack(String url, String payloadParam, String payloadPattern, int totalAttempts) {
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String testUrl = String.format("%s?%s=%s", url, payloadParam, payloadPattern);
            String response = sendGetRequest(testUrl);
            if (response.contains(payloadPattern)) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for XSS vulnerability
    public static int checkXSS(String url, int totalAttempts) {
        String payload = "<script>alert(1)</script>";
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        return performAttack(url, "q", encodedPayload, totalAttempts);
    }

    // Check for SQL Injection vulnerability
    public static int checkSQLInjection(String url, int totalAttempts) {
        String payload = "1' OR '1'='1";
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String testUrl = String.format("%s?id=%s", url, encodedPayload);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("syntax") || response.toLowerCase().contains("sql")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Cross-Site Request Forgery (CSRF) vulnerability
    public static int checkCrossSiteRequestForgery(String url, int totalAttempts) {
        String payload = "<form action=\"" + url + "\">";
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String testUrl = String.format("%s?csrf=%s", url, encodedPayload);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("csrf")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Path Traversal vulnerability
    public static int checkPathTraversal(String url, int totalAttempts) {
        String payload = "../etc/passwd";
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String testUrl = String.format("%s?file=%s", url, encodedPayload);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.contains("passwd")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Broken Authentication vulnerability
    public static int checkBrokenAuthentication(String url, int totalAttempts) {
        String testUrl = String.format("%s/login", url);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("login") && response.toLowerCase().contains("password")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for XML External Entities (XXE) vulnerability
    public static int checkXXE(String url, int totalAttempts) {
        String payload = "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>";
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String testUrl = String.format("%s?xml=%s", url, encodedPayload);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.contains("passwd")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Broken Access Control vulnerability
    public static int checkBrokenAccessControl(String url, int totalAttempts) {
        String testUrl = String.format("%s/admin", url);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (!response.toLowerCase().contains("access denied")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Security Misconfigurations
    public static int checkSecurityMisconfigurations(String url, int totalAttempts) {
        String testUrl = url;
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("directory listing") || response.toLowerCase().contains("debug=true")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for Cryptographic Failures
    public static int checkCryptographicFailures(String url, int totalAttempts) {
        // Simple check: if not HTTPS, consider it a failure
        return url.startsWith("https://") ? 0 : totalAttempts;
    }

    // Check for outdated components
    public static int checkOutdatedComponents(String url, int totalAttempts) {
        String testUrl = url;
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("old version") || response.toLowerCase().contains("deprecated")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for insecure deserialization (Placeholder logic)
    public static int checkInsecureDeserialization(String url, int totalAttempts) {
        // Simulate deserialization attempt, not fully implemented
        String payload = "O:8:\"Exploit\":0:{}";  // Example serialized object
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String testUrl = String.format("%s?data=%s", url, encodedPayload);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("error")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Check for insufficient logging and monitoring
    public static int checkInsufficientLogging(String url, int totalAttempts) {
        String testUrl = String.format("%s/logs", url);
        int successCount = 0;
        for (int i = 0; i < totalAttempts; i++) {
            String response = sendGetRequest(testUrl);
            if (response.toLowerCase().contains("error log") || response.toLowerCase().contains("debug info")) {
                successCount++;
            }
        }
        return successCount;
    }

    // Send GET request and return the response
    public static String sendGetRequest(String url) {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();
        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        } catch (IOException | InterruptedException e) {
            return "";
        }
    }

    // Scrape the website data
    public static String scrapeWebsiteData(String url) {
        StringBuilder result = new StringBuilder();

        try {
            if (!url.startsWith("http://") && !url.startsWith("https://")) {
                throw new MalformedURLException("Invalid URL format: " + url);
            }

            Document doc = Jsoup.connect(url).get();
            Elements links = doc.select("a[href]");
            Elements images = doc.select("img[src]");
            Elements paragraphs = doc.select("p");
            Elements forms = doc.select("form");
            Elements scripts = doc.select("script[src]");
            Elements stylesheets = doc.select("link[rel=stylesheet]");

            result.append("Scraped Data:\n");

            if (!links.isEmpty()) {
                result.append("\nLinks:\n");
                for (Element link : links) {
                    result.append(link.attr("href")).append("\n");
                }
            }

            if (!images.isEmpty()) {
                result.append("\nImages:\n");
                for (Element image : images) {
                    result.append(image.attr("src")).append("\n");
                }
            }

            if (!paragraphs.isEmpty()) {
                result.append("\nParagraphs:\n");
                for (Element paragraph : paragraphs) {
                    result.append(paragraph.text()).append("\n");
                }
            }

            if (!forms.isEmpty()) {
                result.append("\nForms:\n");
                for (Element form : forms) {
                    result.append(form.toString()).append("\n");
                }
            }

            if (!scripts.isEmpty()) {
                result.append("\nScripts:\n");
                for (Element script : scripts) {
                    result.append(script.attr("src")).append("\n");
                }
            }

            if (!stylesheets.isEmpty()) {
                result.append("\nStylesheets:\n");
                for (Element stylesheet : stylesheets) {
                    result.append(stylesheet.attr("href")).append("\n");
                }
            }

        } catch (MalformedURLException e) {
            return "Error: " + e.getMessage();
        } catch (IOException e) {
            return "Error scraping website data: " + e.getMessage();
        } catch (Exception e) {
            return "An unexpected error occurred: " + e.getMessage();
        }

        return result.toString();
    }

    // Simulate attacks
    public static String simulateAttack(String url, int totalAttempts) {
        StringBuilder result = new StringBuilder();
    
        try {
            // CSRF attack simulation
            int csrfSuccess = checkCrossSiteRequestForgery(url, totalAttempts);
            result.append("CSRF Attack Simulation: ").append(csrfSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // XSS attack simulation
            int xssSuccess = checkXSS(url, totalAttempts);
            result.append("XSS Attack Simulation: ").append(xssSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // SQL Injection attack simulation
            int sqliSuccess = checkSQLInjection(url, totalAttempts);
            result.append("SQL Injection Attack Simulation: ").append(sqliSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Path Traversal attack simulation
            int pathTraversalSuccess = checkPathTraversal(url, totalAttempts);
            result.append("Path Traversal Attack Simulation: ").append(pathTraversalSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Broken Authentication attack simulation
            int brokenAuthSuccess = checkBrokenAuthentication(url, totalAttempts);
            result.append("Broken Authentication Attack Simulation: ").append(brokenAuthSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // XXE (XML External Entity) attack simulation
            int xxeSuccess = checkXXE(url, totalAttempts);
            result.append("XXE Attack Simulation: ").append(xxeSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Broken Access Control attack simulation
            int brokenAccessControlSuccess = checkBrokenAccessControl(url, totalAttempts);
            result.append("Broken Access Control Attack Simulation: ").append(brokenAccessControlSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Security Misconfigurations attack simulation
            int securityMisconfigSuccess = checkSecurityMisconfigurations(url, totalAttempts);
            result.append("Security Misconfigurations Attack Simulation: ").append(securityMisconfigSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Cryptographic Failures attack simulation
            int cryptographicFailuresSuccess = checkCryptographicFailures(url, totalAttempts);
            result.append("Cryptographic Failures Simulation: ").append(cryptographicFailuresSuccess).append("/").append(totalAttempts).append(" detected insecure configurations.\n");
    
            // Outdated Components simulation
            int outdatedComponentsSuccess = checkOutdatedComponents(url, totalAttempts);
            result.append("Outdated Components Simulation: ").append(outdatedComponentsSuccess).append("/").append(totalAttempts).append(" outdated component findings.\n");
    
            // Insecure Deserialization simulation
            int insecureDeserializationSuccess = checkInsecureDeserialization(url, totalAttempts);
            result.append("Insecure Deserialization Simulation: ").append(insecureDeserializationSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
            // Insufficient Logging and Monitoring simulation
            int insufficientLoggingSuccess = checkInsufficientLogging(url, totalAttempts);
            result.append("Insufficient Logging and Monitoring Simulation: ").append(insufficientLoggingSuccess).append("/").append(totalAttempts).append(" successful attempts.\n");
    
        } catch (Exception e) {
            return "Error simulating attacks: " + e.getMessage();
        }
    
        return result.toString();
    }
}