package net.javaguids.vigilance;

import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.security.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import javax.net.ssl.HttpsURLConnection;
import java.nio.charset.StandardCharsets;

public class MalwareScanner {

    // Malware signature database (SHA-256 hashes)
    public static final Map<String, String> MALWARE_SIGNATURES = new HashMap<>() {{
        put("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "Malware.EmptyFile");
    put("098f6bcd4621d373cade4e832627b4f6", "Malware.Sample.Backdoor");
    put("5d41402abc4b2a76b9719d911017c592", "Malware.Ransomware.Locky");
    put("7d793037a0760186574b0282f2f435e7", "Malware.Worm.Conficker");
    put("4a44dc15364204a80fe80e9039455cc1", "Malware.Spyware.Keylogger");
    put("9e107d9d372bb6826bd81d3542a419d6", "Malware.Adware.BrowserHijacker");
    put("3b5d5c3712955042212316173ccf37be", "Malware.Rootkit.Darkness");
    put("6c8349cc7260ae62e3b1396831a8398f", "Malware.Cryptominer.Coinhive");

    // Additional malware samples
    put("2b5d5c3712955042212316173ccf37be", "Malware.PUP.Toolbars");
    put("e80b5017098950fc58aad83c8c14978e", "Malware.Ransomware.Cerber");
    put("c81e728d9d4c2f636f067f89cc14862c", "Malware.Trojan.Generic");
    put("eccbc87e4b5ce2fe28308fd9f2a7baf3", "Malware.Trojan.BankBot");
    put("8f14e45fceea167a5a36dedd4bea2543", "Malware.Worm.Sality");
    put("c9f0f895fb98ab9159f51fd0297e236d", "Malware.Adware.EasyAds");
    put("45c48cce2e2d7fbdea1afc51c7c6ad26", "Malware.Cryptominer.XMRig");
    put("d3d9446802a44259755d38e6d163e820", "Malware.Stealer.Redline");
    put("6512bd43d9caa6e02c990b0a82652dca", "Malware.Backdoor.Emotet");
    put("c20ad4d76fe97759aa27a0c99bff6710", "Malware.Ransomware.REvil");
    put("aab3238922bcc25a6f606eb525ffdc56", "Malware.Spyware.DarkComet");
    put("9bf31c7ff062936a96d3c8bd1f8f2ff3", "Malware.Rootkit.ZeroAccess");
    put("c74d97b01eae257e44aa9d5bade97baf", "Malware.Adware.Superfish");
    }};

    private static final String ENCRYPTION_PASSWORD = "Secure12345";

    // public static void main(String[] args) {
    //     Scanner scanner = new Scanner(System.in);

    //     System.out.print("Enter the website URL to scan: ");
    //     String websiteUrl = scanner.nextLine();

    //     String logFile = "scan_results.log";

    //     // Scan the website
    //     scanWebsite(websiteUrl, logFile);
    //     scanner.close();

    //     // Encrypt the log file
    //     encryptLogFile(logFile, ENCRYPTION_PASSWORD);
    // }

    public static void scanWebsite(String websiteUrl, String logFile) {
        List<String> infectedFiles = new ArrayList<>();
        List<String> fileUrls = extractFilesFromWebsite(websiteUrl);
        int scannedCount = 0;

        ExecutorService executor = Executors.newFixedThreadPool(10);
        long startTime = System.currentTimeMillis();

        try (PrintWriter log = new PrintWriter(new FileWriter(logFile))) {
            log.println("Advanced Malware Scan Results:");
            log.println("Scanning website: " + websiteUrl + "\n");

            for (String fileUrl : fileUrls) {
                executor.submit(() -> {
                    System.out.println("Checking: " + fileUrl);
                    byte[] fileContent = downloadFile(fileUrl);

                    if (fileContent != null && isExecutableFile(fileUrl)) {
                        String fileHash = calculateSHA256(fileContent);

                        synchronized (infectedFiles) {
                            if (MALWARE_SIGNATURES.containsKey(fileHash)) {
                                String warningMessage = String.format("[WARNING] Malware detected in %s\nSignature: %s\n",
                                        fileUrl, MALWARE_SIGNATURES.get(fileHash));
                                System.out.println(warningMessage);
                                log.println(warningMessage);
                                infectedFiles.add(fileUrl);
                            } else if (containsSuspiciousPatterns(new String(fileContent))) {
                                String heuristicMessage = String.format("[WARNING] Heuristically suspicious content detected in %s\n", fileUrl);
                                System.out.println(heuristicMessage);
                                log.println(heuristicMessage);
                                infectedFiles.add(fileUrl);
                            }
                        }
                    }
                });
                scannedCount++;
            }

            executor.shutdown();
            executor.awaitTermination(10, TimeUnit.MINUTES);

            log.println("\nScan completed. Total infected files: " + infectedFiles.size());
            long endTime = System.currentTimeMillis();
            System.out.printf("\nScan completed in %.2f seconds.\n", (endTime - startTime) / 1000.0);
            System.out.println("Files scanned: " + scannedCount);
            System.out.println("Infected files: " + infectedFiles.size());
            generateHtmlReport(infectedFiles, scannedCount);
        } catch (IOException | InterruptedException e) {
            System.err.println("Error during scan: " + e.getMessage());
        }
    }

    public static List<String> extractFilesFromWebsite(String websiteUrl) {
        List<String> fileUrls = new ArrayList<>();
        try {
            URL url = new URL(websiteUrl);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder htmlContent = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                htmlContent.append(inputLine);
            }
            in.close();

            String html = htmlContent.toString();
            Matcher matcher = Pattern.compile("href=\"(.*?)\"").matcher(html);

            while (matcher.find()) {
                String href = matcher.group(1);
                if (!href.startsWith("http")) {
                    URL base = new URL(websiteUrl);
                    href = new URL(base, href).toString();
                }
                fileUrls.add(href);
            }
        } catch (Exception e) {
            System.err.println("Error accessing website: " + e.getMessage());
        }

        return fileUrls;
    }

    public static byte[] downloadFile(String fileUrl) {
        try {
            URL url = new URL(fileUrl);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            try (InputStream inputStream = connection.getInputStream()) {
                return inputStream.readAllBytes();
            }
        } catch (Exception e) {
            System.err.println("Error downloading file: " + e.getMessage());
            return null;
        }
    }

    public static String calculateSHA256(byte[] fileContent) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(fileContent);
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 algorithm not available", e);
        }
    }

    public static boolean isExecutableFile(String fileUrl) {
        return fileUrl.endsWith(".exe") || fileUrl.endsWith(".dll") || fileUrl.endsWith(".js");
    }

    public static boolean containsSuspiciousPatterns(String fileContent) {
        String[] patterns = { "eval\\(", "document\\.cookie", "window\\.location", "base64Decode" };
        for (String pattern : patterns) {
            if (fileContent.contains(pattern)) {
                return true;
            }
        }
        return false;
    }

    public static void generateHtmlReport(List<String> infectedFiles, int scannedCount) {
        try (PrintWriter writer = new PrintWriter("scan_report.html")) {
            writer.println("<html><body>");
            writer.println("<h1>Malware Scan Report</h1>");
            writer.println("<p>Total Files Scanned: " + scannedCount + "</p>");
            writer.println("<p>Infected Files Found: " + infectedFiles.size() + "</p>");

            if (!infectedFiles.isEmpty()) {
                writer.println("<ul>");
                for (String file : infectedFiles) {
                    writer.println("<li>" + file + "</li>");
                }
                writer.println("</ul>");
            }
            writer.println("</body></html>");
        } catch (IOException e) {
            System.err.println("Error generating HTML report: " + e.getMessage());
        }
    }

    public static void encryptLogFile(String logFile, String password) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            SecretKey key = createKeyFromPassword(password);
            cipher.init(Cipher.ENCRYPT_MODE, key);

            byte[] content = Files.readAllBytes(Paths.get(logFile));
            byte[] encrypted = cipher.doFinal(content);

            Files.write(Paths.get(logFile + ".enc"), encrypted);
            System.out.println("Log file encrypted: " + logFile + ".enc");
        } catch (Exception e) {
            System.err.println("Error encrypting log file: " + e.getMessage());
        }
    }

    public static SecretKeySpec createKeyFromPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashed = digest.digest(password.getBytes(StandardCharsets.UTF_8));
        return new SecretKeySpec(hashed, "AES");
    }
}
