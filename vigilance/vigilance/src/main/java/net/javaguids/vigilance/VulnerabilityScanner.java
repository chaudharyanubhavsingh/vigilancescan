package net.javaguids.vigilance;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class VulnerabilityScanner {

    // Check for XSS vulnerability
    public static String checkXSS(String url) {
        try {
            String encodedPayload = URLEncoder.encode("<script>alert(1)</script>", StandardCharsets.UTF_8);
            String testUrl = url + "?q=" + encodedPayload;
            String response = sendGetRequest(testUrl);

            if (response.contains("<script>alert(1)</script>")) {
                return "Potential XSS vulnerability found.";
            }
            return "No XSS vulnerability found.";
        } catch (Exception e) {
            return "Error in XSS check: " + e.getMessage();
        }
    }

    // Check for SQL Injection vulnerability
    public static String checkSQLInjection(String url) {
        try {
            String encodedPayload = URLEncoder.encode("1' OR '1'='1", StandardCharsets.UTF_8);
            String testUrl = url + "?id=" + encodedPayload;
            String response = sendGetRequest(testUrl);

            if (response.contains("syntax") || response.contains("SQL")) {
                return "Potential SQL Injection vulnerability found.";
            }
            return "No SQL Injection vulnerability found.";
        } catch (Exception e) {
            return "Error in SQL Injection check: " + e.getMessage();
        }
    }

    // Check for Cross-Site Request Forgery (CSRF) vulnerability
    public static String checkCrossSiteRequestForgery(String url) {
        try {
            String encodedPayload = URLEncoder.encode("<form action=\"" + url + "\">", StandardCharsets.UTF_8);
            String testUrl = url + "?csrf=" + encodedPayload;

            String response = sendGetRequest(testUrl);
            return response.contains("csrf") ? "Potential CSRF vulnerability found." : "No CSRF vulnerability found.";
        } catch (Exception e) {
            return "Error in CSRF check: " + e.getMessage();
        }
    }

    // Check for Path Traversal vulnerability
    public static String checkPathTraversal(String url) {
        try {
            String encodedPayload = URLEncoder.encode("../etc/passwd", StandardCharsets.UTF_8);
            String testUrl = url + "?file=" + encodedPayload;
            String response = sendGetRequest(testUrl);

            return response.contains("passwd") ? "Potential Path Traversal vulnerability found." : "No Path Traversal vulnerability found.";
        } catch (Exception e) {
            return "Error in Path Traversal check: " + e.getMessage();
        }
    }

    // Check for Broken Authentication vulnerability
    public static String checkBrokenAuthentication(String url) {
        try {
            String testUrl = url + "/login";
            String response = sendGetRequest(testUrl);

            if (response.contains("login") && response.contains("password")) {
                return "Potential Broken Authentication found.";
            }
            return "No Broken Authentication vulnerability found.";
        } catch (Exception e) {
            return "Error in Broken Authentication check: " + e.getMessage();
        }
    }

    // Check for XML External Entities (XXE) vulnerability
    public static String checkXXE(String url) {
        try {
            String encodedPayload = URLEncoder.encode("<?xml version=\"1.0\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>", StandardCharsets.UTF_8);
            String testUrl = url + "?xml=" + encodedPayload;
            String response = sendGetRequest(testUrl);

            if (response.contains("passwd")) {
                return "Potential XXE vulnerability found.";
            }
            return "No XXE vulnerability found.";
        } catch (Exception e) {
            return "Error in XXE check: " + e.getMessage();
        }
    }

    // Check for Broken Access Control vulnerability
    public static String checkBrokenAccessControl(String url) {
        try {
            String testUrl = url + "/admin";
            String response = sendGetRequest(testUrl);

            if (!response.contains("Access Denied")) {
                return "Potential Broken Access Control vulnerability found.";
            }
            return "No Broken Access Control vulnerability found.";
        } catch (Exception e) {
            return "Error in Broken Access Control check: " + e.getMessage();
        }
    }

    // Check for Security Misconfigurations
    public static String checkSecurityMisconfigurations(String url) {
        try {
            String response = sendGetRequest(url);
            if (response.contains("directory listing") || response.contains("debug=true")) {
                return "Potential Security Misconfigurations found.";
            }
            return "No Security Misconfigurations found.";
        } catch (Exception e) {
            return "Error in Security Misconfigurations check: " + e.getMessage();
        }
    }

    // Check for Cryptographic Failures
    public static String checkCryptographicFailures(String url) {
        try {
            if (!url.startsWith("https://")) {
                return "Potential Cryptographic Failure: Insecure HTTP found.";
            }
            return "No Cryptographic Failures found.";
        } catch (Exception e) {
            return "Error in Cryptographic Failures check: " + e.getMessage();
        }
    }

    // Check for outdated components
    public static String checkOutdatedComponents(String url) {
        try {
            String response = sendGetRequest(url);
            if (response.contains("old version") || response.contains("deprecated")) {
                return "Potential outdated or vulnerable components found.";
            }
            return "No outdated components found.";
        } catch (Exception e) {
            return "Error in outdated components check: " + e.getMessage();
        }
    }


    // Send GET request and return the response
    public static String sendGetRequest(String url) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build();
        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        } catch (IOException | InterruptedException e) {
            return "Error sending GET request: " + e.getMessage();
        }
    }

    // Scrape the website data
  public static String scrapeWebsiteData(String url) {
    StringBuilder result = new StringBuilder();
    
    try {
        // Check if the URL starts with "http://" or "https://"
        if (!url.startsWith("http://") && !url.startsWith("https://")) {
            throw new MalformedURLException("Invalid URL format: " + url);
        }

        // Connect to the URL and fetch the document
        Document doc = Jsoup.connect(url).get();

        // Scrape various elements from the document
        Elements links = doc.select("a[href]");
        Elements images = doc.select("img[src]");
        Elements paragraphs = doc.select("p");
        Elements forms = doc.select("form");
        Elements scripts = doc.select("script[src]");
        Elements stylesheets = doc.select("link[rel=stylesheet]");

        result.append("Scraped Data:\n");

        // Scrape links
        if (!links.isEmpty()) {
            result.append("\nLinks:\n");
            for (Element link : links) {
                result.append(link.attr("href")).append("\n");
            }
        }

        // Scrape images
        if (!images.isEmpty()) {
            result.append("\nImages:\n");
            for (Element image : images) {
                result.append(image.attr("src")).append("\n");
            }
        }

        // Scrape paragraphs
        if (!paragraphs.isEmpty()) {
            result.append("\nParagraphs:\n");
            for (Element paragraph : paragraphs) {
                result.append(paragraph.text()).append("\n");
            }
        }

        // Scrape forms
        if (!forms.isEmpty()) {
            result.append("\nForms:\n");
            for (Element form : forms) {
                result.append(form.toString()).append("\n");
            }
        }

        // Optional: Scrape scripts
        if (!scripts.isEmpty()) {
            result.append("\nScripts:\n");
            for (Element script : scripts) {
                result.append(script.attr("src")).append("\n");
            }
        }

        // Optional: Scrape stylesheets
        if (!stylesheets.isEmpty()) {
            result.append("\nStylesheets:\n");
            for (Element stylesheet : stylesheets) {
                result.append(stylesheet.attr("href")).append("\n");
            }
        }

    } catch (MalformedURLException e) {
        return "Error: " + e.getMessage();
    } catch (IOException e) {
        return "Error scraping website data: " + e.getMessage();
    } catch (Exception e) {
        return "An unexpected error occurred: " + e.getMessage();
    }

    return result.toString();
}


    // Simulate attacks
    public static String simulateAttack(String url) {
        StringBuilder result = new StringBuilder();
        
        try {
            String encodedCsrfPayload = URLEncoder.encode("<form action=\"" + url + "\">", StandardCharsets.UTF_8);
            String encodedXssPayload = URLEncoder.encode("<script>alert(1)</script>", StandardCharsets.UTF_8);
            String encodedSqliPayload = URLEncoder.encode("1' OR '1'='1", StandardCharsets.UTF_8);
            
            // Perform simulated attacks and log results
            String csrfResponse = sendGetRequest(url + "?csrf=" + encodedCsrfPayload);
            result.append("CSRF Attack Simulation Result: ").append(csrfResponse).append("\n");

            String xssResponse = sendGetRequest(url + "?q=" + encodedXssPayload);
            result.append("XSS Attack Simulation Result: ").append(xssResponse).append("\n");

            String sqliResponse = sendGetRequest(url + "?id=" + encodedSqliPayload);
            result.append("SQL Injection Attack Simulation Result: ").append(sqliResponse).append("\n");
        } catch (Exception e) {
            return "Error simulating attacks: " + e.getMessage();
        }
        
        return result.toString();
    }
}
